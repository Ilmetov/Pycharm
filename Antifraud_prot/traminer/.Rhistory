library(ggplot2)
library(reshape2)
library(rpart) #библа для дерева решений
library (e1071) #библа для байеса
library(klaR) #библа для байеса
library(randomForest)
library(caret) #библа для кроссвалидации
class_mod = read.csv("split_model.csv",header=TRUE, stringsAsFactors=FALSE, sep=",") #читаем файл
afraud <-as.data.frame(class_mod)
#afraud$PARAM1 [afraud$PARAM1 == 1] <- "yes"
#afraud$PARAM1 [afraud$PARAM1 == 0] <- "no"
afraud$MAIN_OPERATION <- as.logical.factor(afraud$PARAM1)
#afraud$PARAM2 [afraud$PARAM2 == 1] <- "TRUE"
#afraud$PARAM2 [afraud$PARAM2 == 0] <- "FALSE"
afraud$PARAM2 <- as.logical.factor(afraud$PARAM2)
#afraud$PARAM3 [afraud$PARAM3 == 1] <- "TRUE"
#afraud$PARAM3 [afraud$PARAM3 == 0] <- "FALSE"
afraud$PARAM3 <- as.logical.factor(afraud$PARAM3)
#afraud$Label [afraud$Label == "good"] <- "0"
#afraud$Label [afraud$Label == "fraud"] <- "1"
afraud$Label <- as.factor(afraud$Label)
# define training control
train_control <- trainControl(method="cv", number=10)
# train the model
grid <- expand.grid(fL="0", usekernel="FALSE")
model <- train(Label ~ PARAM1 + PARAM2 + PARAM3, data=afraud, trControl=train_control, method="nb", tuneGrid=grid)
# summarize results
print(model)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/data")
library(TTR)
library(zoo)
library(ggplot2)
library(reshape2)
library(rpart) #библа для дерева решений
library (e1071) #библа для байеса
library(klaR) #библа для байеса
library(randomForest)
library(caret) #библа для кроссвалидации
class_mod = read.csv("split_model.csv",header=TRUE, stringsAsFactors=FALSE, sep=",") #читаем файл
afraud <-as.data.frame(class_mod)
#afraud$PARAM1 [afraud$PARAM1 == 1] <- "yes"
#afraud$PARAM1 [afraud$PARAM1 == 0] <- "no"
afraud$MAIN_OPERATION <- as.logical.factor(afraud$PARAM1)
#afraud$PARAM2 [afraud$PARAM2 == 1] <- "TRUE"
#afraud$PARAM2 [afraud$PARAM2 == 0] <- "FALSE"
afraud$PARAM2 <- as.logical.factor(afraud$PARAM2)
#afraud$PARAM3 [afraud$PARAM3 == 1] <- "TRUE"
#afraud$PARAM3 [afraud$PARAM3 == 0] <- "FALSE"
afraud$PARAM3 <- as.logical.factor(afraud$PARAM3)
#afraud$Label [afraud$Label == "good"] <- "0"
#afraud$Label [afraud$Label == "fraud"] <- "1"
afraud$Label <- as.factor(afraud$Label)
# define training control
train_control <- trainControl(method="cv", number=10)
# train the model
#grid <- expand.grid(fL="0", usekernel="FALSE")
model <- train(Label ~ PARAM1 + PARAM2 + PARAM3, data=afraud, trControl=train_control, method="nb")
# summarize results
print(model)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/data")
library(TTR)
library(zoo)
library(ggplot2)
library(reshape2)
library(rpart) #библа для дерева решений
library (e1071) #библа для байеса
library(klaR) #библа для байеса
library(randomForest)
library(caret) #библа для кроссвалидации
class_mod = read.csv("split_model.csv",header=TRUE, stringsAsFactors=FALSE, sep=",") #читаем файл
afraud <-as.data.frame(class_mod)
#afraud$PARAM1 [afraud$PARAM1 == 1] <- "yes"
#afraud$PARAM1 [afraud$PARAM1 == 0] <- "no"
afraud$MAIN_OPERATION <- as.logical.factor(afraud$PARAM1)
#afraud$PARAM2 [afraud$PARAM2 == 1] <- "TRUE"
#afraud$PARAM2 [afraud$PARAM2 == 0] <- "FALSE"
afraud$PARAM2 <- as.logical.factor(afraud$PARAM2)
#afraud$PARAM3 [afraud$PARAM3 == 1] <- "TRUE"
#afraud$PARAM3 [afraud$PARAM3 == 0] <- "FALSE"
afraud$PARAM3 <- as.logical.factor(afraud$PARAM3)
#afraud$Label [afraud$Label == "good"] <- "0"
#afraud$Label [afraud$Label == "fraud"] <- "1"
afraud$Label <- as.factor(afraud$Label)
# define training control
#train_control <- trainControl(method="boot", number=10)
#train_control <- trainControl(method="cv", number=10)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
#grid <- expand.grid(fL="0", usekernel="FALSE")
model <- train(Label ~ PARAM1 + PARAM2 + PARAM3, data=afraud, trControl=train_control, method="nb")
# summarize results
print(model)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/traminer")
library(RColorBrewer)
library(TraMineR)
# generate colors
gen_colors <- function()
{
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colour_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
return(colour_vector)
}
col_vector = gen_colors()
### Research: ###
my_seq_test  <- read.csv(file = "seq_fraud_vdns.csv", sep =";", header = FALSE, na.strings = "")
View(my_seq_test)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/traminer")
library(RColorBrewer)
library(TraMineR)
# generate colors
gen_colors <- function()
{
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colour_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
return(colour_vector)
}
col_vector = gen_colors()
### Research: ###
my_seq_test  <- read.csv(file = "seq_fraud_vdns.csv", sep =";", header = FALSE, na.strings = "")
my_seq_test2 <- seqdef(my_seq_test, var = 4:length(names(my_seq_test)), missing = "%") # missing = "%" чтобы удалять пропуски в середине как void
my_seq_test3 <- seqdef(my_seq_test2)#, left = "0", gaps = "0", right = "0")
col_vector[which(attr(my_seq_test3, "labels") == "oper")[[1]]] = "#FF0000"
attr(my_seq_test3,"cpal") <- col_vector#[1:35]
# order operation types by count
my_types <- summarise(group_by(my_seq_test,V3),n=n())
my_types <- my_types[order(my_types$n,decreasing = TRUE),]
# break types into parts (get top t types by count)
t = 4
my_subset = which(my_seq_test$V3 %in% my_types[1:t,1])
my_seq_test4 = my_seq_test3[my_subset,]
my_group <- (interaction(my_seq_test$V1[my_subset], my_seq_test$V3[my_subset]))
seqplot(my_seq_test4, type = "Ht", title = "Enthropy", withlegend = FALSE, cols=2, rows = t,group = my_group)
seqplot(my_seq_test4, type = "d", title = "State distribution plot", withlegend = FALSE, group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "i", title = "Index plot (first sequences)", withlegend = FALSE, tlim = 1:nrow(my_seq_test4), group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "f", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
#seqplot(my_seq_test4, type = "ms", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
View(my_seq_test)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/traminer")
library(RColorBrewer)
library(TraMineR)
# generate colors
gen_colors <- function()
{
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colour_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
return(colour_vector)
}
col_vector = gen_colors()
### Research: ###
my_seq_test  <- read.csv(file = "seq_fraud_vdns.csv", sep =";", header = FALSE, na.strings = "")
my_seq_test2 <- seqdef(my_seq_test, var = 3:length(names(my_seq_test)), missing = "%") # missing = "%" чтобы удалять пропуски в середине как void
my_seq_test3 <- seqdef(my_seq_test2)#, left = "0", gaps = "0", right = "0")
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/traminer")
library(RColorBrewer)
library(TraMineR)
# generate colors
gen_colors <- function()
{
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colour_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
return(colour_vector)
}
col_vector = gen_colors()
### Research: ###
my_seq_test  <- read.csv(file = "seq_fraud_vdns.csv", sep =";", header = FALSE, na.strings = "")
my_seq_test2 <- seqdef(my_seq_test, var = 4:length(names(my_seq_test)), missing = "%") # missing = "%" чтобы удалять пропуски в середине как void
my_seq_test3 <- seqdef(my_seq_test2)#, left = "0", gaps = "0", right = "0")
col_vector[which(attr(my_seq_test3, "labels") == "oper")[[1]]] = "#FF0000"
attr(my_seq_test3,"cpal") <- col_vector#[1:35]
# order operation types by count
my_types <- summarise(group_by(my_seq_test,V3),n=n())
my_types <- my_types[order(my_types$n,decreasing = TRUE),]
# break types into parts (get top t types by count)
t = 4
my_subset = which(my_seq_test$V3 %in% my_types[1:t,1])
my_seq_test4 = my_seq_test3[my_subset,]
my_group <- (interaction(my_seq_test$V1[my_subset], my_seq_test$V3[my_subset]))
seqplot(my_seq_test4, type = "Ht", title = "Enthropy", withlegend = FALSE, cols=2, rows = t,group = my_group)
seqplot(my_seq_test4, type = "d", title = "State distribution plot", withlegend = FALSE, group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "i", title = "Index plot (first sequences)", withlegend = FALSE, tlim = 1:nrow(my_seq_test4), group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "f", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
#seqplot(my_seq_test4, type = "ms", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/traminer")
library(RColorBrewer)
library(TraMineR)
# generate colors
gen_colors <- function()
{
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colour_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
return(colour_vector)
}
col_vector = gen_colors()
### Research: ###
my_seq_test  <- read.csv(file = "seq_fraud_vdns.csv", sep =";", header = FALSE, na.strings = "")
my_seq_test2 <- seqdef(my_seq_test, var = 4:length(names(my_seq_test)), missing = "%") # missing = "%" чтобы удалять пропуски в середине как void
my_seq_test3 <- seqdef(my_seq_test2)#, left = "0", gaps = "0", right = "0")
col_vector[which(attr(my_seq_test3, "labels") == "oper")[[1]]] = "#FF0000"
attr(my_seq_test3,"cpal") <- col_vector#[1:35]
# order operation types by count
my_types <- summary(group_by(my_seq_test,V3),n=n())
my_types <- my_types[order(my_types$n,decreasing = TRUE),]
# break types into parts (get top t types by count)
t = 4
my_subset = which(my_seq_test$V3 %in% my_types[1:t,1])
my_seq_test4 = my_seq_test3[my_subset,]
my_group <- (interaction(my_seq_test$V1[my_subset], my_seq_test$V3[my_subset]))
seqplot(my_seq_test4, type = "Ht", title = "Enthropy", withlegend = FALSE, cols=2, rows = t,group = my_group)
seqplot(my_seq_test4, type = "d", title = "State distribution plot", withlegend = FALSE, group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "i", title = "Index plot (first sequences)", withlegend = FALSE, tlim = 1:nrow(my_seq_test4), group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "f", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
#seqplot(my_seq_test4, type = "ms", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
install.packages("dplyr")
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/traminer")
library(RColorBrewer)
library(TraMineR)
library(dplyr)
# generate colors
gen_colors <- function()
{
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colour_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
return(colour_vector)
}
col_vector = gen_colors()
### Research: ###
my_seq_test  <- read.csv(file = "seq_fraud_vdns.csv", sep =";", header = FALSE, na.strings = "")
my_seq_test2 <- seqdef(my_seq_test, var = 4:length(names(my_seq_test)), missing = "%") # missing = "%" чтобы удалять пропуски в середине как void
my_seq_test3 <- seqdef(my_seq_test2)#, left = "0", gaps = "0", right = "0")
col_vector[which(attr(my_seq_test3, "labels") == "oper")[[1]]] = "#FF0000"
attr(my_seq_test3,"cpal") <- col_vector#[1:35]
# order operation types by count
my_types <- summarise(group_by(my_seq_test,V3),n=n())
my_types <- my_types[order(my_types$n,decreasing = TRUE),]
# break types into parts (get top t types by count)
t = 4
my_subset = which(my_seq_test$V3 %in% my_types[1:t,1])
my_seq_test4 = my_seq_test3[my_subset,]
my_group <- (interaction(my_seq_test$V1[my_subset], my_seq_test$V3[my_subset]))
seqplot(my_seq_test4, type = "Ht", title = "Enthropy", withlegend = FALSE, cols=2, rows = t,group = my_group)
seqplot(my_seq_test4, type = "d", title = "State distribution plot", withlegend = FALSE, group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "i", title = "Index plot (first sequences)", withlegend = FALSE, tlim = 1:nrow(my_seq_test4), group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "f", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
#seqplot(my_seq_test4, type = "ms", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
View(my_types)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/traminer")
library(RColorBrewer)
library(TraMineR)
library(dplyr)
# generate colors
gen_colors <- function()
{
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colour_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
return(colour_vector)
}
col_vector = gen_colors()
### Research: ###
my_seq_test  <- read.csv(file = "seq_fraud_vdns.csv", sep =";", header = FALSE, na.strings = "")
my_seq_test2 <- seqdef(my_seq_test, var = 4:length(names(my_seq_test)), missing = "%") # missing = "%" чтобы удалять пропуски в середине как void
my_seq_test3 <- seqdef(my_seq_test2)#, left = "0", gaps = "0", right = "0")
col_vector[which(attr(my_seq_test3, "labels") == "oper")[[1]]] = "#FF0000"
attr(my_seq_test3,"cpal") <- col_vector#[1:35]
# order operation types by count
my_types <- summarise(group_by(my_seq_test,V3),n=n())
my_types <- my_types[order(my_types$n,decreasing = TRUE),]
# break types into parts (get top t types by count)
t = 1
my_subset = which(my_seq_test$V3 %in% my_types[1:t,1])
my_seq_test4 = my_seq_test3[my_subset,]
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/traminer")
library(RColorBrewer)
library(TraMineR)
library(dplyr)
# generate colors
gen_colors <- function()
{
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colour_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
return(colour_vector)
}
col_vector = gen_colors()
### Research: ###
my_seq_test  <- read.csv(file = "seq_fraud_vdns.csv", sep =";", header = FALSE, na.strings = "")
my_seq_test2 <- seqdef(my_seq_test, var = 4:length(names(my_seq_test)), missing = "%") # missing = "%" чтобы удалять пропуски в середине как void
my_seq_test3 <- seqdef(my_seq_test2)#, left = "0", gaps = "0", right = "0")
col_vector[which(attr(my_seq_test3, "labels") == "oper")[[1]]] = "#FF0000"
attr(my_seq_test3,"cpal") <- col_vector#[1:35]
# order operation types by count
my_types <- summarise(group_by(my_seq_test,V3),n=n())
my_types <- my_types[order(my_types$n,decreasing = TRUE),]
# break types into parts (get top t types by count)
t = 0
my_subset = which(my_seq_test$V3 %in% my_types[1:t,1])
my_seq_test4 = my_seq_test3[my_subset,]
View(my_seq_test4)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/traminer")
library(RColorBrewer)
library(TraMineR)
library(dplyr)
# generate colors
gen_colors <- function()
{
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colour_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
return(colour_vector)
}
col_vector = gen_colors()
### Research: ###
my_seq_test  <- read.csv(file = "seq_fraud_vdns.csv", sep =";", header = FALSE, na.strings = "")
my_seq_test2 <- seqdef(my_seq_test, var = 4:length(names(my_seq_test)), missing = "%") # missing = "%" чтобы удалять пропуски в середине как void
my_seq_test3 <- seqdef(my_seq_test2)#, left = "0", gaps = "0", right = "0")
col_vector[which(attr(my_seq_test3, "labels") == "oper")[[1]]] = "#FF0000"
attr(my_seq_test3,"cpal") <- col_vector#[1:35]
# order operation types by count
my_types <- summarise(group_by(my_seq_test,V3),n=n())
my_types <- my_types[order(my_types$n,decreasing = TRUE),]
# break types into parts (get top t types by count)
t = 0
my_subset = which(my_seq_test$V3 %in% my_types[1:t,1])
my_seq_test4 = my_seq_test3[my_subset,]
my_group <- (interaction(my_seq_test$V1[my_subset], my_seq_test$V3[my_subset]))
View(my_types)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/traminer")
library(RColorBrewer)
library(TraMineR)
library(dplyr)
# generate colors
gen_colors <- function()
{
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colour_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
return(colour_vector)
}
col_vector = gen_colors()
### Research: ###
my_seq_test  <- read.csv(file = "AI3.csv", sep =";", header = FALSE, na.strings = "")
my_seq_test2 <- seqdef(my_seq_test, var = 4:length(names(my_seq_test)), missing = "%") # missing = "%" чтобы удалять пропуски в середине как void
my_seq_test3 <- seqdef(my_seq_test2)#, left = "0", gaps = "0", right = "0")
col_vector[which(attr(my_seq_test3, "labels") == "oper")[[1]]] = "#FF0000"
attr(my_seq_test3,"cpal") <- col_vector#[1:35]
# order operation types by count
my_types <- summarise(group_by(my_seq_test,V3),n=n())
my_types <- my_types[order(my_types$n,decreasing = TRUE),]
# break types into parts (get top t types by count)
t = 0
my_subset = which(my_seq_test$V3 %in% my_types[1:t,1])
my_seq_test4 = my_seq_test3[my_subset,]
my_group <- (interaction(my_seq_test$V1[my_subset], my_seq_test$V3[my_subset]))
seqplot(my_seq_test4, type = "Ht", title = "Enthropy", withlegend = FALSE, cols=2, rows = t,group = my_group)
seqplot(my_seq_test4, type = "d", title = "State distribution plot", withlegend = FALSE, group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "i", title = "Index plot (first sequences)", withlegend = FALSE, tlim = 1:nrow(my_seq_test4), group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "f", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
#seqplot(my_seq_test4, type = "ms", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/traminer")
library(RColorBrewer)
library(TraMineR)
library(dplyr)
# generate colors
gen_colors <- function()
{
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colour_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
return(colour_vector)
}
col_vector = gen_colors()
### Research: ###
my_seq_test  <- read.csv(file = "AI3.csv", sep =";", header = FALSE, na.strings = "")
my_seq_test2 <- seqdef(my_seq_test, var = 4:length(names(my_seq_test)), missing = "%") # missing = "%" чтобы удалять пропуски в середине как void
my_seq_test3 <- seqdef(my_seq_test2)#, left = "0", gaps = "0", right = "0")
col_vector[which(attr(my_seq_test3, "labels") == "oper")[[1]]] = "#FF0000"
attr(my_seq_test3,"cpal") <- col_vector#[1:35]
# order operation types by count
my_types <- summarise(group_by(my_seq_test,V3),n=n())
my_types <- my_types[order(my_types$n,decreasing = TRUE),]
# break types into parts (get top t types by count)
t = 4
my_subset = which(my_seq_test$V3 %in% my_types[1:t,1])
my_seq_test4 = my_seq_test3[my_subset,]
my_group <- (interaction(my_seq_test$V1[my_subset], my_seq_test$V3[my_subset]))
seqplot(my_seq_test4, type = "Ht", title = "Enthropy", withlegend = FALSE, cols=2, rows = t,group = my_group)
seqplot(my_seq_test4, type = "d", title = "State distribution plot", withlegend = FALSE, group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "i", title = "Index plot (first sequences)", withlegend = FALSE, tlim = 1:nrow(my_seq_test4), group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "f", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
#seqplot(my_seq_test4, type = "ms", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/data")
library(TTR)
library(zoo)
library(ggplot2)
library(reshape2)
library(rpart) #библа для дерева решений
library (e1071) #библа для байеса
library(klaR) #библа для байеса
library(randomForest)
library(caret) #библа для кроссвалидации
class_mod = read.csv("split_model.csv",header=TRUE, stringsAsFactors=FALSE, sep=";") #читаем файл
afraud <-as.data.frame(class_mod)
#afraud$PARAM1 [afraud$PARAM1 == 1] <- "yes"
#afraud$PARAM1 [afraud$PARAM1 == 0] <- "no"
afraud$MAIN_OPERATION <- as.logical.factor(afraud$PARAM1)
#afraud$PARAM2 [afraud$PARAM2 == 1] <- "TRUE"
#afraud$PARAM2 [afraud$PARAM2 == 0] <- "FALSE"
afraud$PARAM2 <- as.logical.factor(afraud$PARAM2)
#afraud$PARAM3 [afraud$PARAM3 == 1] <- "TRUE"
#afraud$PARAM3 [afraud$PARAM3 == 0] <- "FALSE"
afraud$PARAM3 <- as.logical.factor(afraud$PARAM3)
#afraud$Label [afraud$Label == "good"] <- "0"
#afraud$Label [afraud$Label == "fraud"] <- "1"
afraud$Label <- as.factor(afraud$Label)
# define training control
train_control <- trainControl(method="boot", number=100)
# train the model
model <- train(Label ~ PARAM1 + PARAM2 + PARAM3, data=afraud, trControl=train_control, method="nb")
# summarize results
print(model)
fit <- randomForest(Label ~ PARAM1 + PARAM2 + PARAM3, data=afraud,ntree=50, norm.votes=FALSE)
# show the results
plot(fit)
text(fit, use.n = TRUE)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/data")
library(TTR)
library(zoo)
library(ggplot2)
library(reshape2)
library(rpart) #библа для дерева решений
library (e1071) #библа для байеса
library(klaR) #библа для байеса
library(randomForest)
library(caret) #библа для кроссвалидации
class_mod = read.csv("split_model.csv",header=TRUE, stringsAsFactors=FALSE, sep=";") #читаем файл
afraud <-as.data.frame(class_mod)
#afraud$PARAM1 [afraud$PARAM1 == 1] <- "yes"
#afraud$PARAM1 [afraud$PARAM1 == 0] <- "no"
afraud$MAIN_OPERATION <- as.logical.factor(afraud$PARAM1)
#afraud$PARAM2 [afraud$PARAM2 == 1] <- "TRUE"
#afraud$PARAM2 [afraud$PARAM2 == 0] <- "FALSE"
afraud$PARAM2 <- as.logical.factor(afraud$PARAM2)
#afraud$PARAM3 [afraud$PARAM3 == 1] <- "TRUE"
#afraud$PARAM3 [afraud$PARAM3 == 0] <- "FALSE"
afraud$PARAM3 <- as.logical.factor(afraud$PARAM3)
#afraud$Label [afraud$Label == "good"] <- "0"
#afraud$Label [afraud$Label == "fraud"] <- "1"
afraud$Label <- as.factor(afraud$Label)
# define training control
train_control <- trainControl(method="boot", number=100)
# train the model
model <- train(Label ~ PARAM1 + PARAM2 + PARAM3, data=afraud, trControl=train_control, method="nb")
# summarize results
print(model)
View(afraud)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/data")
library(TTR)
library(zoo)
library(ggplot2)
library(reshape2)
library(rpart) #библа для дерева решений
library (e1071) #библа для байеса
library(klaR) #библа для байеса
library(randomForest)
library(caret) #библа для кроссвалидации
class_mod = read.csv("split_model.csv",header=TRUE, stringsAsFactors=FALSE, sep=",") #читаем файл
afraud <-as.data.frame(class_mod)
#afraud$PARAM1 [afraud$PARAM1 == 1] <- "yes"
#afraud$PARAM1 [afraud$PARAM1 == 0] <- "no"
afraud$MAIN_OPERATION <- as.logical.factor(afraud$PARAM1)
#afraud$PARAM2 [afraud$PARAM2 == 1] <- "TRUE"
#afraud$PARAM2 [afraud$PARAM2 == 0] <- "FALSE"
afraud$PARAM2 <- as.logical.factor(afraud$PARAM2)
#afraud$PARAM3 [afraud$PARAM3 == 1] <- "TRUE"
#afraud$PARAM3 [afraud$PARAM3 == 0] <- "FALSE"
afraud$PARAM3 <- as.logical.factor(afraud$PARAM3)
#afraud$Label [afraud$Label == "good"] <- "0"
#afraud$Label [afraud$Label == "fraud"] <- "1"
afraud$Label <- as.factor(afraud$Label)
# define training control
train_control <- trainControl(method="boot", number=100)
# train the model
model <- train(Label ~ PARAM1 + PARAM2 + PARAM3, data=afraud, trControl=train_control, method="nb")
# summarize results
print(model)
plot(model)
setwd("/Users/Dok/PycharmProjects/Antifraud_prot/traminer")
library(RColorBrewer)
library(TraMineR)
library(dplyr)
# generate colors
gen_colors <- function()
{
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colour_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
return(colour_vector)
}
col_vector = gen_colors()
### Research: ###
my_seq_test  <- read.csv(file = "AI3.csv", sep =";", header = FALSE, na.strings = "")
my_seq_test2 <- seqdef(my_seq_test, var = 4:length(names(my_seq_test)), missing = "%") # missing = "%" чтобы удалять пропуски в середине как void
my_seq_test3 <- seqdef(my_seq_test2)#, left = "0", gaps = "0", right = "0")
col_vector[which(attr(my_seq_test3, "labels") == "oper")[[1]]] = "#FF0000"
attr(my_seq_test3,"cpal") <- col_vector#[1:35]
# order operation types by count
my_types <- summarise(group_by(my_seq_test,V3),n=n())
my_types <- my_types[order(my_types$n,decreasing = TRUE),]
# break types into parts (get top t types by count)
t = 4
my_subset = which(my_seq_test$V3 %in% my_types[1:t,1])
my_seq_test4 = my_seq_test3[my_subset,]
my_group <- (interaction(my_seq_test$V1[my_subset], my_seq_test$V3[my_subset]))
seqplot(my_seq_test4, type = "Ht", title = "Enthropy", withlegend = FALSE, cols=2, rows = t,group = my_group)
seqplot(my_seq_test4, type = "d", title = "State distribution plot", withlegend = FALSE, group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "i", title = "Index plot (first sequences)", withlegend = FALSE, tlim = 1:nrow(my_seq_test4), group = my_group , cols = 2, rows = t)
seqplot(my_seq_test4, type = "f", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
#seqplot(my_seq_test4, type = "ms", title = "Sequence frequency plot", withlegend = FALSE, pbarw = TRUE, group = my_group , cols = 2, rows = t)
